{
    "fileTypes": [
        "dm", 
        "dme"
    ], 
    "firstLineMatch": "-[*]-( Mode:)? C -[*]-", 
    "foldingStartMarker": "(?x)\n\t\t /\\*\\*(?!\\*)\n\t\t|^(?![^{]*?//|[^{]*?/\\*(?!.*?\\*/.*?\\{)).*?\\{\\s*($|//|/\\*(?!.*?\\*/.*\\S))\n\t", 
    "foldingStopMarker": "(?<!\\*)\\*\\*/|^\\s*\\}", 
    "keyEquivalent": "^~C", 
    "name": "C", 
    "patterns": [
        {
            "include": "#preprocessor-rule-enabled"
        }, 
        {
            "include": "#preprocessor-rule-disabled"
        }, 
        {
            "include": "#preprocessor-rule-other"
        }, 
        {
            "include": "#comments"
        }, 
        {
            "match": "\\b(sleep|spawn|break|continue|do|else|for|goto|if|return|switch|while|del|new|to|in|step)\\b", 
            "name": "keyword.control.dm"
        }, 
        {
            "match": "\\b(var|arg)\\b", 
            "name": "storage.type.dm"
        }, 
        {
            "match": "\\b(as|const|global|set|static|tmp)\\b", 
            "name": "storage.modifier.dm"
        }, 
        {
            "match": "\\b(usr|world|src|proc|verb)\\b", 
            "name": "variable.language.dm"
        }, 
        {
            "match": "\\b([A-Z_]+)\\b", 
            "name": "constant.language.dm"
        }, 
        {
            "match": "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b", 
            "name": "constant.numeric.dm"
        }, 
        {
            "begin": "\"", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.dm"
                }
            }, 
            "end": "\"", 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.dm"
                }
            }, 
            "name": "string.quoted.double.dm", 
            "patterns": [
                {
                    "include": "#string_escaped_char"
                }, 
                {
                    "include": "#string_embedded_expression"
                }
            ]
        }, 
        {
            "begin": "'", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.dm"
                }
            }, 
            "end": "'", 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.dm"
                }
            }, 
            "name": "string.quoted.single.dm", 
            "patterns": [
                {
                    "include": "#string_escaped_char"
                }
            ]
        }, 
        {
            "begin": "(?x)\n        \t\t^\\s*\\#\\s*(define)\\s+             # define\n        \t\t((?<id>[a-zA-Z_][a-zA-Z0-9_]*))  # macro name\n        \t\t(?:                              # and optionally:\n        \t\t    (\\()                         # an open parenthesis\n        \t\t        (\n        \t\t            \\s* \\g<id> \\s*       # first argument\n        \t\t            ((,) \\s* \\g<id> \\s*)*  # additional arguments\n        \t\t            (?:\\.\\.\\.)?          # varargs ellipsis?\n        \t\t        )\n        \t\t    (\\))                         # a close parenthesis\n        \t\t)?\n        \t", 
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.import.define.dm"
                }, 
                "2": {
                    "name": "entity.name.function.preprocessor.dm"
                }, 
                "4": {
                    "name": "punctuation.definition.parameters.dm"
                }, 
                "5": {
                    "name": "variable.parameter.preprocessor.dm"
                }, 
                "7": {
                    "name": "punctuation.separator.parameters.dm"
                }, 
                "8": {
                    "name": "punctuation.definition.parameters.dm"
                }
            }, 
            "end": "(?=(?://|/\\*))|$", 
            "name": "meta.preprocessor.macro.dm", 
            "patterns": [
                {
                    "match": "(?>\\\\\\s*\\n)", 
                    "name": "punctuation.separator.continuation.dm"
                }, 
                {
                    "include": "$base"
                }
            ]
        }, 
        {
            "begin": "^\\s*#\\s*(error|warning)\\b", 
            "captures": {
                "1": {
                    "name": "keyword.control.import.error.dm"
                }
            }, 
            "end": "$", 
            "name": "meta.preprocessor.diagnostic.dm", 
            "patterns": [
                {
                    "match": "(?>\\\\\\s*\\n)", 
                    "name": "punctuation.separator.continuation.dm"
                }
            ]
        }, 
        {
            "include": "#pragma-mark"
        }, 
        {
            "begin": "^\\s*#\\s*(define|defined|elif|else|if|ifdef|ifndef|line|pragma|undef)\\b", 
            "captures": {
                "1": {
                    "name": "keyword.control.import.dm"
                }
            }, 
            "end": "(?=(?://|/\\*))|$", 
            "name": "meta.preprocessor.dm", 
            "patterns": [
                {
                    "match": "(?>\\\\\\s*\\n)", 
                    "name": "punctuation.separator.continuation.dm"
                }
            ]
        }, 
        {
            "include": "#block"
        }, 
        {
            "begin": "(?x)\n    \t\t(?:  ^                                 # begin-of-line\n    \t\t  |\n    \t\t     (?: (?= \\s )           (?<!else|new|return) (?<=\\w)      #  or word + space before name\n    \t\t       | (?= \\s*[A-Za-z_] ) (?<!&&)       (?<=[*&>])   #  or type modifier before name\n    \t\t     )\n    \t\t)\n    \t\t(\\s*) (?!(while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\\s*\\()\n    \t\t(\n    \t\t\t(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++ |                  # actual name\n    \t\t\t(?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )  # if it is a C++ operator\n    \t\t)\n    \t\t \\s*(?=\\()", 
            "beginCaptures": {
                "1": {
                    "name": "punctuation.whitespace.function.leading.dm"
                }, 
                "3": {
                    "name": "entity.name.function.dm"
                }, 
                "4": {
                    "name": "punctuation.definition.parameters.dm"
                }
            }, 
            "end": "(?<=\\})|(?=#)|(;)?", 
            "name": "meta.function.dm", 
            "patterns": [
                {
                    "include": "#comments"
                }, 
                {
                    "include": "#parens"
                }, 
                {
                    "match": "\\bconst\\b", 
                    "name": "storage.modifier.dm"
                }, 
                {
                    "include": "#block"
                }
            ]
        }
    ], 
    "repository": {
        "access": {
            "match": "\\.[a-zA-Z_][a-zA-Z_0-9]*\\b(?!\\s*\\()", 
            "name": "variable.other.dot-access.dm"
        }, 
        "block": {
            "begin": "\\{", 
            "end": "\\}", 
            "name": "meta.block.dm", 
            "patterns": [
                {
                    "include": "#block_innards"
                }
            ]
        }, 
        "block_innards": {
            "patterns": [
                {
                    "include": "#preprocessor-rule-enabled-block"
                }, 
                {
                    "include": "#preprocessor-rule-disabled-block"
                }, 
                {
                    "include": "#preprocessor-rule-other-block"
                }, 
                {
                    "include": "#sizeof"
                }, 
                {
                    "include": "#access"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.whitespace.support.function.leading.dm"
                        }, 
                        "2": {
                            "name": "support.function.C99.dm"
                        }
                    }, 
                    "match": "(\\s*)\\b(hypot(f|l)?|s(scanf|ystem|nprintf|ca(nf|lb(n(f|l)?|ln(f|l)?))|i(n(h(f|l)?|f|l)?|gn(al|bit))|tr(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?)|error|pbrk|ftime|len|rchr|xfrm)|printf|et(jmp|vbuf|locale|buf)|qrt(f|l)?|w(scanf|printf)|rand)|n(e(arbyint(f|l)?|xt(toward(f|l)?|after(f|l)?))|an(f|l)?)|c(s(in(h(f|l)?|f|l)?|qrt(f|l)?)|cos(h(f)?|f|l)?|imag(f|l)?|t(ime|an(h(f|l)?|f|l)?)|o(s(h(f|l)?|f|l)?|nj(f|l)?|pysign(f|l)?)|p(ow(f|l)?|roj(f|l)?)|e(il(f|l)?|xp(f|l)?)|l(o(ck|g(f|l)?)|earerr)|a(sin(h(f|l)?|f|l)?|cos(h(f|l)?|f|l)?|tan(h(f|l)?|f|l)?|lloc|rg(f|l)?|bs(f|l)?)|real(f|l)?|brt(f|l)?)|t(ime|o(upper|lower)|an(h(f|l)?|f|l)?|runc(f|l)?|gamma(f|l)?|mp(nam|file))|i(s(space|n(ormal|an)|cntrl|inf|digit|u(nordered|pper)|p(unct|rint)|finite|w(space|c(ntrl|type)|digit|upper|p(unct|rint)|lower|al(num|pha)|graph|xdigit|blank)|l(ower|ess(equal|greater)?)|al(num|pha)|gr(eater(equal)?|aph)|xdigit|blank)|logb(f|l)?|max(div|abs))|di(v|fftime)|_Exit|unget(c|wc)|p(ow(f|l)?|ut(s|c(har)?|wc(har)?)|error|rintf)|e(rf(c(f|l)?|f|l)?|x(it|p(2(f|l)?|f|l|m1(f|l)?)?))|v(s(scanf|nprintf|canf|printf|w(scanf|printf))|printf|f(scanf|printf|w(scanf|printf))|w(scanf|printf)|a_(start|copy|end|arg))|qsort|f(s(canf|e(tpos|ek))|close|tell|open|dim(f|l)?|p(classify|ut(s|c|w(s|c))|rintf)|e(holdexcept|set(e(nv|xceptflag)|round)|clearexcept|testexcept|of|updateenv|r(aiseexcept|ror)|get(e(nv|xceptflag)|round))|flush|w(scanf|ide|printf|rite)|loor(f|l)?|abs(f|l)?|get(s|c|pos|w(s|c))|re(open|e|ad|xp(f|l)?)|m(in(f|l)?|od(f|l)?|a(f|l|x(f|l)?)?))|l(d(iv|exp(f|l)?)|o(ngjmp|cal(time|econv)|g(1(p(f|l)?|0(f|l)?)|2(f|l)?|f|l|b(f|l)?)?)|abs|l(div|abs|r(int(f|l)?|ound(f|l)?))|r(int(f|l)?|ound(f|l)?)|gamma(f|l)?)|w(scanf|c(s(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?|mbs)|pbrk|ftime|len|r(chr|tombs)|xfrm)|to(b|mb)|rtomb)|printf|mem(set|c(hr|py|mp)|move))|a(s(sert|ctime|in(h(f|l)?|f|l)?)|cos(h(f|l)?|f|l)?|t(o(i|f|l(l)?)|exit|an(h(f|l)?|2(f|l)?|f|l)?)|b(s|ort))|g(et(s|c(har)?|env|wc(har)?)|mtime)|r(int(f|l)?|ound(f|l)?|e(name|alloc|wind|m(ove|quo(f|l)?|ainder(f|l)?))|a(nd|ise))|b(search|towc)|m(odf(f|l)?|em(set|c(hr|py|mp)|move)|ktime|alloc|b(s(init|towcs|rtowcs)|towc|len|r(towc|len))))\\b"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.whitespace.function-call.leading.dm"
                        }, 
                        "2": {
                            "name": "support.function.any-method.dm"
                        }, 
                        "3": {
                            "name": "punctuation.definition.parameters.dm"
                        }
                    }, 
                    "match": "(?x) (?: (?= \\s )  (?:(?<=else|new|return) | (?<!\\w)) (\\s+))?\n\t\t\t(\\b\n\t\t\t\t(?!(while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\\s*\\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\\b | :: )++                  # actual name\n\t\t\t)\n\t\t\t \\s*(\\()", 
                    "name": "meta.function-call.dm"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "variable.other.dm"
                        }, 
                        "2": {
                            "name": "punctuation.definition.parameters.dm"
                        }
                    }, 
                    "match": "(?x)\n\t\t\t        (?x)\n\t\t\t(?:\n\t\t\t     (?: (?= \\s )           (?<!else|new|return) (?<=\\w)\\s+      #  or word + space before name\n\t\t\t     )\n\t\t\t)\n\t\t\t(\n\t\t\t\t(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++    |              # actual name\n\t\t\t\t(?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )?  # if it is a C++ operator\n\t\t\t)\n\t\t\t \\s*(\\()", 
                    "name": "meta.initialization.dm"
                }, 
                {
                    "include": "#block"
                }, 
                {
                    "include": "$base"
                }
            ]
        }, 
        "comments": {
            "patterns": [
                {
                    "captures": {
                        "1": {
                            "name": "meta.toc-list.banner.block.dm"
                        }
                    }, 
                    "match": "^/\\* =(\\s*.*?)\\s*= \\*/$\\n?", 
                    "name": "comment.block.dm"
                }, 
                {
                    "begin": "/\\*", 
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.dm"
                        }
                    }, 
                    "end": "\\*/", 
                    "name": "comment.block.dm"
                }, 
                {
                    "match": "\\*/.*\\n", 
                    "name": "invalid.illegal.stray-comment-end.dm"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "meta.toc-list.banner.line.dm"
                        }
                    }, 
                    "match": "^// =(\\s*.*?)\\s*=\\s*$\\n?", 
                    "name": "comment.line.banner.dm"
                }, 
                {
                    "begin": "//", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.dm"
                        }
                    }, 
                    "end": "$\\n?", 
                    "name": "comment.line.double-slash.dm", 
                    "patterns": [
                        {
                            "match": "(?>\\\\\\s*\\n)", 
                            "name": "punctuation.separator.continuation.dm"
                        }
                    ]
                }
            ]
        }, 
        "disabled": {
            "begin": "^\\s*#\\s*if(n?def)?\\b.*$", 
            "comment": "eat nested preprocessor if(def)s", 
            "end": "^\\s*#\\s*endif\\b.*$", 
            "patterns": [
                {
                    "include": "#disabled"
                }, 
                {
                    "include": "#pragma-mark"
                }
            ]
        }, 
        "parens": {
            "begin": "\\(", 
            "end": "\\)", 
            "name": "meta.parens.dm", 
            "patterns": [
                {
                    "include": "$base"
                }
            ]
        }, 
        "pragma-mark": {
            "captures": {
                "1": {
                    "name": "meta.preprocessor.dm"
                }, 
                "2": {
                    "name": "keyword.control.import.pragma.dm"
                }, 
                "3": {
                    "name": "meta.toc-list.pragma-mark.dm"
                }
            }, 
            "match": "^\\s*(#\\s*(pragma\\s+mark)\\s+(.*))", 
            "name": "meta.section"
        }, 
        "preprocessor-rule-disabled": {
            "begin": "^\\s*(#(if)\\s+(0)\\b).*", 
            "captures": {
                "1": {
                    "name": "meta.preprocessor.dm"
                }, 
                "2": {
                    "name": "keyword.control.import.if.dm"
                }, 
                "3": {
                    "name": "constant.numeric.preprocessor.dm"
                }
            }, 
            "end": "^\\s*(#\\s*(endif)\\b)", 
            "patterns": [
                {
                    "begin": "^\\s*(#\\s*(else)\\b)", 
                    "captures": {
                        "1": {
                            "name": "meta.preprocessor.dm"
                        }, 
                        "2": {
                            "name": "keyword.control.import.else.dm"
                        }
                    }, 
                    "end": "(?=^\\s*#\\s*endif\\b.*$)", 
                    "patterns": [
                        {
                            "include": "$base"
                        }
                    ]
                }, 
                {
                    "begin": "", 
                    "end": "(?=^\\s*#\\s*(else|endif)\\b.*$)", 
                    "name": "comment.block.preprocessor.if-branch", 
                    "patterns": [
                        {
                            "include": "#disabled"
                        }, 
                        {
                            "include": "#pragma-mark"
                        }
                    ]
                }
            ]
        }, 
        "preprocessor-rule-disabled-block": {
            "begin": "^\\s*(#(if)\\s+(0)\\b).*", 
            "captures": {
                "1": {
                    "name": "meta.preprocessor.dm"
                }, 
                "2": {
                    "name": "keyword.control.import.if.dm"
                }, 
                "3": {
                    "name": "constant.numeric.preprocessor.dm"
                }
            }, 
            "end": "^\\s*(#\\s*(endif)\\b)", 
            "patterns": [
                {
                    "begin": "^\\s*(#\\s*(else)\\b)", 
                    "captures": {
                        "1": {
                            "name": "meta.preprocessor.dm"
                        }, 
                        "2": {
                            "name": "keyword.control.import.else.dm"
                        }
                    }, 
                    "end": "(?=^\\s*#\\s*endif\\b.*$)", 
                    "patterns": [
                        {
                            "include": "#block_innards"
                        }
                    ]
                }, 
                {
                    "begin": "", 
                    "end": "(?=^\\s*#\\s*(else|endif)\\b.*$)", 
                    "name": "comment.block.preprocessor.if-branch.in-block", 
                    "patterns": [
                        {
                            "include": "#disabled"
                        }, 
                        {
                            "include": "#pragma-mark"
                        }
                    ]
                }
            ]
        }, 
        "preprocessor-rule-enabled": {
            "begin": "^\\s*(#(if)\\s+(0*1)\\b)", 
            "captures": {
                "1": {
                    "name": "meta.preprocessor.dm"
                }, 
                "2": {
                    "name": "keyword.control.import.if.dm"
                }, 
                "3": {
                    "name": "constant.numeric.preprocessor.dm"
                }
            }, 
            "end": "^\\s*(#\\s*(endif)\\b)", 
            "patterns": [
                {
                    "begin": "^\\s*(#\\s*(else)\\b).*", 
                    "captures": {
                        "1": {
                            "name": "meta.preprocessor.dm"
                        }, 
                        "2": {
                            "name": "keyword.control.import.else.dm"
                        }
                    }, 
                    "contentName": "comment.block.preprocessor.else-branch", 
                    "end": "(?=^\\s*#\\s*endif\\b.*$)", 
                    "patterns": [
                        {
                            "include": "#disabled"
                        }, 
                        {
                            "include": "#pragma-mark"
                        }
                    ]
                }, 
                {
                    "begin": "", 
                    "end": "(?=^\\s*#\\s*(else|endif)\\b.*$)", 
                    "patterns": [
                        {
                            "include": "$base"
                        }
                    ]
                }
            ]
        }, 
        "preprocessor-rule-enabled-block": {
            "begin": "^\\s*(#(if)\\s+(0*1)\\b)", 
            "captures": {
                "1": {
                    "name": "meta.preprocessor.dm"
                }, 
                "2": {
                    "name": "keyword.control.import.if.dm"
                }, 
                "3": {
                    "name": "constant.numeric.preprocessor.dm"
                }
            }, 
            "end": "^\\s*(#\\s*(endif)\\b)", 
            "patterns": [
                {
                    "begin": "^\\s*(#\\s*(else)\\b).*", 
                    "captures": {
                        "1": {
                            "name": "meta.preprocessor.dm"
                        }, 
                        "2": {
                            "name": "keyword.control.import.else.dm"
                        }
                    }, 
                    "contentName": "comment.block.preprocessor.else-branch.in-block", 
                    "end": "(?=^\\s*#\\s*endif\\b.*$)", 
                    "patterns": [
                        {
                            "include": "#disabled"
                        }, 
                        {
                            "include": "#pragma-mark"
                        }
                    ]
                }, 
                {
                    "begin": "", 
                    "end": "(?=^\\s*#\\s*(else|endif)\\b.*$)", 
                    "patterns": [
                        {
                            "include": "#block_innards"
                        }
                    ]
                }
            ]
        }, 
        "preprocessor-rule-other": {
            "begin": "^\\s*(#\\s*(if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))", 
            "captures": {
                "1": {
                    "name": "meta.preprocessor.dm"
                }, 
                "2": {
                    "name": "keyword.control.import.dm"
                }
            }, 
            "end": "^\\s*(#\\s*(endif)\\b).*$", 
            "patterns": [
                {
                    "include": "$base"
                }
            ]
        }, 
        "preprocessor-rule-other-block": {
            "begin": "^\\s*(#\\s*(if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))", 
            "captures": {
                "1": {
                    "name": "meta.preprocessor.dm"
                }, 
                "2": {
                    "name": "keyword.control.import.dm"
                }
            }, 
            "end": "^\\s*(#\\s*(endif)\\b).*$", 
            "patterns": [
                {
                    "include": "#block_innards"
                }
            ]
        }, 
        "string_embedded_expression": {
            "patterns": [
                {
                    "begin": "(?<!\\\\)\\[", 
                    "end": "\\]", 
                    "name": "string.regexp.dm", 
                    "patterns": [
                        {
                            "include": "$self"
                        }
                    ]
                }
            ]
        }, 
        "string_escaped_char": {
            "patterns": [
                {
                    "match": "\\\\(\\\\|[\\[abefnprtv'\"?]|[0-3]\\d{,2}|[4-7]\\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})", 
                    "name": "constant.character.escape.dm"
                }, 
                {
                    "match": "\\\\.", 
                    "name": "invalid.illegal.unknown-escape.dm"
                }
            ]
        }
    }, 
    "scopeName": "source.dm", 
    "uuid": "25066DC2-6B1D-11D9-9D5B-000D93589AF6"
}